#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

function printTable() {
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]; then
        local -r numberOfLines="$(wc -l <<< "${data}")"

        if [[ "${numberOfLines}" -gt '0' ]]; then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1)) do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"

                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]]; then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi

                # Add Header Or Body
                table="${table}\n"
                local j=1

                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1)) do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done

                table="${table}#|\n"

                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]; then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]; then
                echo "${table}" | column -t -s '#' | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines() {
    local -r content="${1}"
    echo "${content}" | sed '/^\s*$/d'
}

function repeatString() {
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]; then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo "${result// /${string}}"
    fi
}

function isEmptyString() {
    local -r string="${1}"

    if [[ "$(trimString "${string}")" = '' ]]; then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}

function trimString() {
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

if [[ "$1" =~ ^.*COMMIT_EDITMSG$ ]]; then
  message=$(cat "$1")
else
  message="$1"
fi

if ! [[ "$message" =~ ^(feat|FTR|fix|FIX|docs|style|CLP|refactor|RFR|perf|test|TST|build|ci|chore|revert|vendor|wip|WIP|security|SCR|CRO):[[:space:]][A-Z0-9]+-[A-Z0-9]+:[[:space:]][A-Za-z0-9].*$ ]]; then
  echo  "Commit message should start with the commit type, followed by Zoho or Asana task-id and task name (example: 'feat: TA1-T123: Enable Client Certificate Support')"
  echo "Select the type of change that you're committing"
  printTable ':' "PREFIX:TITLE:DESCRIPTION:EMOJI😀
feat / FTR:Features:A new feature for the user, not a new feature for a build script:✨
fix / FIX:Bug Fixes:A bug fix for the user, not a fix to a build scripts:🐛
docs:Documentation:Documentation only changes:📚
style / CLP:Styles:Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc):💎
refactor / RFR:Code Refactoring:A code change that neither fixes a bug nor adds a feature:📦
perf:Performance Improvements:A code change that improves performance:🚀
test / TST:Tests:Adding missing tests or correcting existing tests:🚨
build:Builds:Changes that affect the build system or external dependencies (example scopes - gulp, broccoli, npm):🛠
ci:Continuous Integrations:Changes to our CI configuration files and scripts (example scopes - Travis, Circle, BrowserStack, SauceLabs):⚙️
chore:Chores:Other changes that don't modify src or test files but updating gulp tasks etc:♻️
revert:Reverts:Reverts a previous commit:🗑
vendor:Vendor:Update version for dependencies, packages:📦
wip / WIP:Work in progress:Has not yet finished his work on the code (thus, work in progress):🚧
security / SCR:Security:Security issue fix:🔐
CRO:Content Rate Optimization:Content Rate Optimization:👷
"
  exit 1
fi
